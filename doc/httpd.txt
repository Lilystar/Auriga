==========================================================================
HTTPD の使用方法
--------------------------------------------------------------------------

・httpd はデフォルトで有効になっています。
　単純に無効にするには httpd.conf の enable を 0 にしてください。
　コンパイル時に無効にするには make ファイルで NO_HTTPD マクロを定義してください。

・外部 CGI はデフォルトで無効になっています。
　有効にするには「外部 CGI の注意」セクションを参考にしてください。


==========================================================================
HTTPD の設定方法 − サーバー全体
--------------------------------------------------------------------------

・doc/conf_ref.txt に従えば OK です。一部わかりにくい物を解説しておきます。

	server_max_requests_per_second, server_max_requests_period
		これは Auriga 本体の動作を妨げないように httpd 側にアクセスが集中すると
		503 エラーを返すようにするための機能です。
		
		内部処理的には _period 期間中に _per_second * _period 回のアクセスが
		あると _period の間アクセスを禁止 ( 503 エラーに ) します。


==========================================================================
HTTPD の設定方法 − URL ごとの設定
--------------------------------------------------------------------------

・doc/conf_ref.txt に従えば OK です。
	ただ、ここにはサンプルを用意しておきました。
	conf_ref と見比べながら参考にしてください。
	.htaccess に似ている部分が多いので、そちらをいじったことがあれば
	とっつきやすいかもしれません。
	
	
	// デフォルトの設定
	//   URL ごとに個別に指定しない限り CGI を無効にする
	target: none
	cgi_ext_list: none
	
	
	// メンバー専用ページの設定
	//   localhost, LAN 内部 からか、または Auriga の
	//   アカウントで認証しないと入れないようにする
	target: /members/
	
	satisfy: any
	
	order: deny,allow
	deny: all
	allow: 127.0.0.1
	allow: 192.168.0.0/24
	
	authtype: Basic
	authfunc: 1
	authname: Auriga server members site

	
	// 管理者用のページの設定
	//   localhost からで、かつ設定したパスワードで認証をする
	target: /admin/
	
	satisfy: all
	
	order: deny,allow
	deny: all
	allow: 127.0.0.1
	
	authtype: Digest
	authname: Auriga server administrator site
	authuser: admin:$Digest$aa4a5443cb91ee1810785314651e5dd1
	
	
	// cgi-bin ディレクトリの設定
	//   CGI を実行可能にする
	target: /cgi-bin/
	cgi_ext_list: .cgi .pl .php .rb .exe


	// ディレクトリ設定終了
	target: none




==========================================================================
HTTPD の細かな仕様
--------------------------------------------------------------------------

・RFC 2068/2069 を参考にしていますが、完全には準拠していません。

・アクセス制御
	・IP アドレスとユーザー認証により行います。
	・これは URL ごとに設定できます。

・ユーザー認証方式
	・Basic 認証と Digest 認証の両方に対応しています。
	・Auriga のアカウントを認証に利用できます（ログインサーバーのみ）

・アクセス数の制限
	・サーバー内での秒間リクエスト数を制限できます。
	　この制限にかかった場合、503 を返します。

・対応しているメソッド
	・GET, POST のみ

・条件付きリクエスト
	・If-Modified-Since, If-Unmodified-Since, If-Range に対応していますが、
	　E-Tag には対応していないので、これらは日付のみ受け付けます。

・部分リクエスト
	・Range に対応していますが、range-set が１つである必要があります。
	　つまり、"Range: 0-100" は OK ですが、"Range: 0-5, 10-99" は NG です。

・ログ
	・apache と同じ形式のアクセスログをはきます。
	　フォーマットは common-log, combined-log から選択できます。
	　これらに対応するログビューアーやログ解析ソフトなどで利用できます。
	　なお、アクセスログだけでエラーログは吐きません。

・対応しているリクエストヘッダ
	Content-Length, Connection, Authorization, Range,
	If-Modified-Since, If-Unmodified-Since, If-Range,
	Content-type, Referer, User-Agent,
	Cookie ( これは RFC 2068 ではない )

・生成するレスポンスヘッダ
	Server, Content-Type, Content-Length, Content-Range, Connectiom,
	WWW-Authenticate, Retry-After, Accept-Ranges, Last-Modified, Date

・外部 CGI
	通常の HTTPD の CGI のように外部プログラムを実行できます。
	詳しくは次のセクションを見てください。
	なお、SSI はサポートしていません。


==========================================================================
外部 CGI の仕様
--------------------------------------------------------------------------

・ほとんどネタですが、とりあえず動きます。
　ただ、非常に多くの制限があるのでこのセッションと、
　次のセッションをよく読んでおいてください。

・Win32（BCC/VC）での実行プログラムの決定方法は特殊で、以下の通りです。

	・ファイルが #! で始まっているならスクリプトとして認識し、
	　その行に書かれているインタプリタとオプションで実行します。
	　ただし、Win32 環境ではこのプログラムパスはほぼ無意味なので、
	　実行ファイル名とオプションのみ取り出して実行します。
	　つまり、 hoge.cgi の先頭行に "#!/usr/bin/perl -w" とあれば、
	　実際は "perl -w hoge.cgi" を実行します。
	　よってインタプリタに PATH が通っていればスクリプトを実行できます。

	・ファイルが #! で始まっていないならプログラムとして認識し、
	　そのプログラムをそのまま実行します。

・RFC 3875 を参考にしていますが、完全には準拠していません。
　CGI が以下の仕様に合致するかを確認する必要があります。

	・nph には対応していますが、内部処理はほぼ共通なため
	　負荷軽減に貢献することはほとんどないでしょう。
	　また、nph かどうか判断はファイル名ではなく、
	　CGI の出力したデータの先頭を見て判断します。
	
	・PATH_INFO には未対応です

	・RFC 3875 で定義されているうち、以下のメタ変数を設定します
		AUTH_TYPE, CONTENT_LENGTH, CONTENT_TYPE, DOCUMENT_ROOT,
		GATEWAY_INTERFACE, QUERY_STRING, REMOTE_ADDR, REMOTE_PORT,
		REMOTE_USER, REQUEST_METHOD, SCRIPT_NAME,
		SERVER_NAME, SERVER_PORT, SERVER_PROTOCOL, SERVER_SOFTWARE
	
	・RFC 3875 で定義されているうち、以下の推奨メタ変数を設定しません。
		PATH_INFO, PATH_TRANSLATED, REMOTE_HOST
	
	・RFC 3875 で定義されていないものでは、以下のメタ変数を設定します。
	　ただし、多すぎると省略される可能性があります。
		HTTP_COOKIE, HTTP_REFERER, HTTP_USER_AGENT など、
		リクエストヘッダで与えられる ( HTTP_ から始まる ) メタ変数

	・一部のサーバーで設定される(たとえば以下のような)メタ変数を設定しません
		SCRIPT_FILENAME, SCRIPT_URI, etc...
	
	・一部のサーバーで機能する環境変数(メタ変数ではない)を設定しません
		TZ, HOME, PATH, USER, etc...
	
	・Location ヘッダのローカルリダイレクトを適切に処理しません。
		・ローカルリダイレクトでもサーバー内でリダイレクト動作をせず、
		　クライアントにリダイレクト要求 (302) を返します。


・CGI の中断
　以下の状態のいずれかになったとき CGI プロセスに中断要求を出します。
　
	・CGI 処理中にクライアントがコネクションを切断した
	・CGI 処理が規定の処理時間（httpd.conf で設定）内に終わらなかった

　一般的には以下の方法で中断しますが、中断待ちのプロセスがたまっている場合、
　いきなり強制終了させる（または KILL シグナルを送る）ことがあります。

　Win32 では以下の方法で CGI を中断します

	・CGI プロセスに BREAK イベントを送る
	　（必要なら CGI プロセスはこれを受信して終了処理を行うべきです）
	・規定の中断時間内に終了しなければ、プロセスを強制終了させる

　gcc などでは以下の方法で CGI を中断します
　
　　・CGI プロセスに TERM シグナルを送る
	　（必要なら CGI プロセスはこれを受信して終了処理を行うべきです）
	・規定の中断時間内に終了しなければ、KILL シグナルを送る
	・KILL シグナル送信後、一度だけ wait してゾンビ化を防ごうとする
	　（この wait で資源を回収できなければ、ゾンビ化します）

・ログ
	CGI に関するログは今のところ未実装です。


==========================================================================
外部 CGI の注意
--------------------------------------------------------------------------

・外部 CGI はセキュリティがシビアなので上級者以外は利用しないことをお勧めします。

・デフォルトでは CGI を利用するためのコードはコンパイルされません。
　利用する場合、make ファイルで NO_HTTPD_CGI マクロを
　定義しないようにしてください。
　また、httpd.conf の CGI 関連の設定に目を通しておいてください。

・CGI メタ変数の SERVER_NAME は cgi_server_name の設定値をそのまま渡します。
　サーバーのグローバルなホスト名（またはアドレス）を設定する必要があります。
　設定がおかしいと一部の CGI が正常に動作しません。

・CGI を呼び出せるディレクトリの設定方法
　まず、httpd.conf の CGI の拡張子を none に設定してください。
　（これでディレクトリごとに個別に設定しない限り CGI が呼ばれなくなります）
　次に、CGI を設置するディレクトリのアクセス情報を設定します。
　その中でディレクトリに対する CGI の拡張子を設定してください。
　
　<例>
　  cgi_enable: 1				<- CGI を利用可能にする
　  cgi_ext_list: none			<- デフォルトの CGI 拡張子を設定しない
　  target: /cgi-bin/			<- cgi-bin ディレクトリの設定を開始する
　  cgi_ext_list: .cgi .pl		<- CGI 拡張子を cgi と pl のみにする
　  target: none				<- このディレクトリの設定を終了する(省略可能)

　第三者がファイルをアップロードできるような CGI を設置する場合、
　これらの設定を怠ると任意のプログラムを実行される危険性があります。
　（バックドアをアップロードして CGI として起動されるなど）

・CGI プロセスの権限
　Auriga を実行しているプロセスと同じユーザー権限で起動します。
　別のユーザー権限に切り替えて起動する機能はありません。

・cygwin での CGI
　パフォーマンスに深刻な影響を及ぼす可能性があります。
　cygwin では POSIX 的なアプローチ ( fork/exec ) によって CGI を起動します。
　Win32 環境では fork をサポートしないので、cygwin によるエミュレートでの
　実行になりますが、プロセスのメモリ空間を一度完全にコピーします。
　よって CGI 起動の際に非常に多くの CPU とメモリリソースを消費します。

・gcc での CGI ( cygwin 含む )
　CGI プロセスに制御を渡す際にソケットのディスクリプタをクローズしません。
　悪意ある CGI を実行するとソケットのデータをフックされる可能性があります。

